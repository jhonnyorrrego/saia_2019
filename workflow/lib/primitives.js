function Point(a,c){this.x=a;this.y=c;this.style=new Style();this.oType="Point"}Point.load=function(c){var a=new Point();a.x=c.x;a.y=c.y;a.style=Style.load(c.style);return a};Point.loadArray=function(a){var d=[];for(var c=0;c<a.length;c++){d.push(Point.load(a[c]))}return d};Point.cloneArray=function(a){var d=[];for(var c=0;c<a.length;c++){d.push(a[c].clone())}return d};Point.prototype={transform:function(a){if(this.style!=null){this.style.transform(a)}var d=this.x;var c=this.y;this.x=a[0][0]*d+a[0][1]*c+a[0][2];this.y=a[1][0]*d+a[1][1]*c+a[1][2]},paint:function(a){if(this.style!=null){this.style.setupContext(a)}if(this.style.strokeStyle!=""){a.fillStyle=this.style.strokeStyle;a.beginPath();var c=1;if(this.style.lineWidth!=null){c=parseInt(this.style.lineWidth)}a.arc(this.x,this.y,c,0,Math.PI/180*360,false);a.fill()}},equals:function(a){if(!(a instanceof Point)){return false}return(this.x==a.x)&&(this.y==a.y)&&this.style.equals(a.style)},clone:function(){var a=new Point(this.x,this.y);a.style=this.style.clone();return a},near:function(c,e,a){var d=Math.sqrt(Math.pow(this.x-c,2)+Math.pow(this.y-e,2));return(d<=a)},contains:function(a,c){return this.x==a&&this.y==c},toString:function(){return"point("+this.x+","+this.y+")"},getPoints:function(){return[this]},getBounds:function(){return Util.getBounds(this.getPoints())},toSVG:function(){var a="";a+='<circle cx="'+this.x+'" cy="'+this.y+'" r="'+1+'"';a+=this.style.toSVG();a+="/>";return a}};function Line(c,a){this.startPoint=c;this.endPoint=a;this.style=new Style();this.oType="Line"}Line.load=function(a){var c=new Line();c.startPoint=Point.load(a.startPoint);c.endPoint=Point.load(a.endPoint);c.style=Style.load(a.style);return c};Line.prototype={transform:function(a){this.startPoint.transform(a);this.endPoint.transform(a);if(this.style!=null){this.style.transform(a)}},paint:function(e){if(this.style!=null){this.style.setupContext(e)}e.moveTo(this.startPoint.x,this.startPoint.y);if(this.style.dashLength==0){e.lineTo(this.endPoint.x,this.endPoint.y)}else{var a=Math.sqrt(Math.pow(this.startPoint.x-this.endPoint.x,2)+Math.pow(this.startPoint.y-this.endPoint.y,2));var h=Util.getAngle(this.startPoint,this.endPoint);var c=false;for(var d=0;d<a;d+=(this.style.dashLength)){var g=this.startPoint.clone();g.transform(Matrix.translationMatrix(-this.startPoint.x,-this.startPoint.y));g.transform(Matrix.translationMatrix(0,-d));g.transform(Matrix.rotationMatrix(h));g.transform(Matrix.translationMatrix(this.startPoint.x,this.startPoint.y));if(c==false){e.lineTo(g.x,g.y);c=true}else{e.moveTo(g.x,g.y);c=false}}}if(this.style.strokeStyle!=null&&this.style.strokeStyle!=""){e.stroke()}},clone:function(){var a=new Line(this.startPoint.clone(),this.endPoint.clone());a.style=this.style.clone();return a},equals:function(a){if(!a instanceof Line){return false}return this.startPoint.equals(a.startPoint)&&this.endPoint.equals(a.endPoint)&&this.style.equals(a.style)},contains:function(d,g){if(Math.min(this.startPoint.x,this.endPoint.x)<=d&&d<=Math.max(this.startPoint.x,this.endPoint.x)&&Math.min(this.startPoint.y,this.endPoint.y)<=g&&g<=Math.max(this.startPoint.y,this.endPoint.y)){if(this.startPoint.x==this.endPoint.x){return d==this.startPoint.x}else{var e=(this.endPoint.y-this.startPoint.y)/(this.endPoint.x-this.startPoint.x);var c=this.startPoint.y-e*this.startPoint.x;return g==e*d+c}}else{return false}},near:function(x,y,radius){with(this){var m;if(endPoint.x==startPoint.x){return((startPoint.y-radius<=y&&endPoint.y+radius>=y)||(endPoint.y-radius<=y&&startPoint.y+radius>=y))&&x>startPoint.x-radius&&x<startPoint.x+radius}if(startPoint.y==endPoint.y){return((startPoint.x-radius<=x&&endPoint.x+radius>=x)||(endPoint.x-radius<=x&&startPoint.x+radius>=x))&&y>startPoint.y-radius&&y<startPoint.y+radius}startX=Math.min(endPoint.x,startPoint.x);startY=Math.min(endPoint.y,startPoint.y);endX=Math.max(endPoint.x,startPoint.x);endY=Math.max(endPoint.y,startPoint.y);m=(endPoint.y-startPoint.y)/(endPoint.x-startPoint.x);b=-1;var c=startPoint.y-m*startPoint.x;var d=(m*x+(b*y)+c)/Math.sqrt(Math.pow(m,2)+Math.pow(b,2));if(d<0){d=0-d}return(d<=radius&&endX>=x&&x>=startX&&endY>=y&&y>=startY)||startPoint.near(x,y,radius)||endPoint.near(x,y,radius)}},getPoints:function(){points=[];points.push(this.startPoint);points.push(this.endPoint);return points},getBounds:function(){return Util.getBounds(this.getPoints())},toString:function(){return"line("+this.startPoint+","+this.endPoint+")"},toSVG:function(){var a='<line x1="'+this.startPoint.x+'" y1="'+this.startPoint.y+'" x2="'+this.endPoint.x+'" y2="'+this.endPoint.y+'"';a+=this.style.toSVG();a+=" />";return a}};function Polyline(){this.points=[];this.style=new Style();this.startPoint=null;this.oType="Polyline"}Polyline.load=function(c){var a=new Polyline();a.points=Point.loadArray(c.points);a.style=Style.load(c.style);a.startPoint=Point.load(c.startPoint);return a};Polyline.prototype={addPoint:function(a){if(this.points.length==0){this.startPoint=a}this.points.push(a)},transform:function(matrix){with(this){if(style!=null){style.transform(matrix)}for(var i=0;i<points.length;i++){points[i].transform(matrix)}}},getPoints:function(){var c=[];for(var a=0;a<this.points.length;a++){c.push(this.points[a])}return c},getBounds:function(){return Util.getBounds(this.getPoints())},clone:function(){var ret=new Polyline();with(this){for(var i=0;i<points.length;i++){ret.addPoint(points[i].clone())}}ret.style=this.style.clone();return ret},equals:function(a){if(!a instanceof Polyline){return false}if(a.points.length==this.points.length){for(var c=0;c<this.points.length;c++){if(!this.points[c].equals(a.points[c])){return false}}}else{return false}if(!this.style.equals(a.style)){return false}if(!this.startPoint.equals(a.startPoint)){return false}return true},paint:function(context){with(this){if(style!=null){style.setupContext(context)}context.moveTo(points[0].x,points[0].y);for(var i=1;i<points.length;i++){context.lineTo(points[i].x,points[i].y)}if(style.strokeStyle!=null&&this.style.strokeStyle!=""){context.stroke()}if(style.fillStyle!=null&&this.style.fillStyle!=""){context.fill()}}},contains:function(a,c){return Util.isPointInside(new Point(a,c),this.getPoints())},near:function(x,y,radius){with(this){for(var i=0;i<points.length-1;i++){var l=new Line(points[i],points[i+1]);if(l.near(x,y)){return true}}return false}},toString:function(){var result="polyline(";with(this){for(var i=0;i<points.length;i++){result+=points[i].toString()+" "}}result+=")";return result},toSVG:function(){var a='<polyline points="';for(var c=0;c<this.points.length;c++){a+=this.points[c].x+","+this.points[c].y+" "}a+='"';a+=this.style.toSVG();a+="/>";return a}};function Polygon(){this.points=[];this.style=new Style();this.oType="Polygon"}Polygon.load=function(c){var a=new Polygon();a.points=Point.loadArray(c.points);a.style=Style.load(c.style);return a};Polygon.prototype={addPoint:function(a){this.points.push(a)},getPosition:function(){return[this.points[0].x,[this.points[0].y]]},paint:function(context){with(context){beginPath();if(this.style!=null){this.style.setupContext(context)}if(this.points.length>1){moveTo(this.points[0].x,this.points[0].y);for(var i=1;i<this.points.length;i++){lineTo(this.points[i].x,this.points[i].y)}}closePath();if(this.style.fillStyle!=null&&this.style.fillStyle!=""){fill()}if(this.style.strokeStyle!=null&&this.style.strokeStyle!=""){stroke()}}},getPoints:function(){return this.points},getBounds:function(){return Util.getBounds(this.getPoints())},fill:function(context,color){with(this){context.fillStyle=color;context.beginPath();context.moveTo(points[0].x,points[0].y);for(var i=1;i<points.length;i++){context.lineTo(points[i].x,points[i].y)}context.lineTo(points[0].x,points[0].y);context.closePath();context.fill()}},near:function(x,y,radius){with(this){var i=0;for(i=0;i<points.length-1;i++){var l=new Line(points[i],points[i+1]);if(l.near(x,y,radius)){return true}}l=new Line(points[i],points[0]);if(l.near(x,y,radius)){return true}return false}},equals:function(anotherPolygon){if(!anotherPolygon instanceof Polygon){return false}with(this){if(anotherPolygon.points.length==points.length){for(var i=0;i<points.length;i++){if(!points[i].equals(anotherPolygon.points[i])){return false}}}}return true},clone:function(){var ret=new Polygon();with(this){for(var i=0;i<points.length;i++){ret.addPoint(points[i].clone())}}ret.style=this.style.clone();return ret},contains:function(a,d){var c=false;return Util.isPointInside(new Point(a,d),this.points)},transform:function(matrix){with(this){if(style!=null){style.transform(matrix)}for(var i=0;i<points.length;i++){points[i].transform(matrix)}}},toString:function(){var result="polygon(";with(this){for(var i=0;i<points.length;i++){result+=points[i].toString()+" "}}result+=")";return result},toSVG:function(){var a='<polygon points="';for(var c=0;c<this.points.length;c++){a+=this.points[c].x+","+this.points[c].y+" "}a+='" '+this.style.toSVG()+" />";return a}};function QuadCurve(d,a,c){this.startPoint=d;this.controlPoint=a;this.endPoint=c;this.style=new Style();this.oType="QuadCurve"}QuadCurve.load=function(a){var c=new QuadCurve();c.startPoint=Point.load(a.startPoint);c.controlPoint=Point.load(a.controlPoint);c.endPoint=Point.load(a.endPoint);c.style=Style.load(a.style);return c};QuadCurve.loadArray=function(c){var a=[];for(var d=0;d<c.length;d++){a.push(QuadCurve.load(c[d]))}return a};QuadCurve.prototype={transform:function(a){if(this.style!=null){this.style.transform(a)}this.startPoint.transform(a);this.controlPoint.transform(a);this.endPoint.transform(a)},getPoints:function(){return[this.startPoint,this.controlPoint,this.endPoint]},getBounds:function(){return Util.getBounds(this.getPoints())},paint:function(context){with(context){if(this.style!=null){this.style.setupContext(context)}with(this){moveTo(startPoint.x,startPoint.y);quadraticCurveTo(controlPoint.x,controlPoint.y,endPoint.x,endPoint.y);if(style.fillStyle!=null&&this.style.fillStyle!=""){context.fill()}if(style.strokeStyle!=null&&this.style.strokeStyle!=""){stroke()}}}},near:function(x,y,radius){with(this){var polls=100;if(!Util.isPointInside(new Point(x,y),[startPoint,controlPoint,endPoint])&&!startPoint.near(x,y,radius)&&!endPoint.near(x,y,radius)){return false}var low=0;var high=polls;var i=(high-low)/2;while(i>=low&&i<=high&&high-low>0.01){i=low+(high-low)/2;var t=i/polls;var fromEnd=Math.pow((1-t),2);var a=2*t*(1-t);var fromStart=Math.pow(t,2);var newX=fromEnd*startPoint.x+a*controlPoint.x+fromStart*endPoint.x;var newY=fromEnd*startPoint.y+a*controlPoint.y+fromStart*endPoint.y;p=new Point(newX,newY);if(p.near(x,y,radius)){return true}pToStart=Math.sqrt(Math.pow(startPoint.x-p.x,2)+Math.pow(startPoint.y-p.y,2));myToStart=Math.sqrt(Math.pow(startPoint.x-x,2)+Math.pow(startPoint.y-y,2));if(myToStart<pToStart){high=i}else{if(myToStart!=pToStart){low=i}else{return false}}return startPoint.near(x,y,radius)||endPoint.near(x,y,radius)}}},clone:function(){ret=new QuadCurve(this.startPoint.clone(),this.controlPoint.clone(),this.endPoint.clone());ret.style=this.style.clone();return ret},equals:function(a){if(!a instanceof QuadCurve){return false}return this.startPoint.equals(a.startPoint)&&this.controlPoint.equals(a.controlPoint)&&this.endPoint.equals(a.endPoint)&&this.style.equals(a.style)},deprecated_contains:function(a,c){return this.near(a,c,3);points=[this.startPoint,this.controlPoint,this.endPoint];return Util.isPointInside(new Point(a,c),points)},contains:function(j,h){var u=this.startPoint.x;var e=this.startPoint.y;var r=this.controlPoint.x;var a=this.controlPoint.y;var t=this.endPoint.x;var d=this.endPoint.y;var w=u-2*r+t;var v=e-2*a+d;var n=j-u;var k=h-e;var z=t-u;var g=d-e;var m=(n*v-k*w)/(z*v-g*w);if(m<0||m>1||m!=m){return false}var s=w*m*m+2*(r-u)*m+u;var c=v*m*m+2*(a-e)*m+e;var o=z*m+u;var A=g*m+e;return(j>=s&&j<o)||(j>=o&&j<s)||(h>=c&&h<A)||(h>=A&&h<c)},toString:function(){return"quad("+this.startPoint+","+this.controlPoint+","+this.endPoint+")"},toSVG:function(){var a='<path d="M';a+=this.startPoint.x+","+this.endPoint.y;a+=" Q"+this.controlPoint.x+","+this.controlPoint.y;a+=" "+this.endPoint.x+","+this.endPoint.y;a+='" '+this.style.toSVG()+" />";return a}};function CubicCurve(e,c,a,d){this.startPoint=e;this.controlPoint1=c;this.controlPoint2=a;this.endPoint=d;this.style=new Style();this.oType="CubicCurve"}CubicCurve.load=function(c){var a=new CubicCurve();a.startPoint=Point.load(c.startPoint);a.controlPoint1=Point.load(c.controlPoint1);a.controlPoint2=Point.load(c.controlPoint2);a.endPoint=Point.load(c.endPoint);a.style=Style.load(c.style);return a};CubicCurve.prototype={transform:function(a){if(this.style!=null){this.style.transform(a)}this.startPoint.transform(a);this.controlPoint1.transform(a);this.controlPoint2.transform(a);this.endPoint.transform(a)},paint:function(context){with(this){if(style!=null){style.setupContext(context)}context.moveTo(startPoint.x,startPoint.y);context.bezierCurveTo(controlPoint1.x,controlPoint1.y,controlPoint2.x,controlPoint2.y,endPoint.x,endPoint.y);if(style.fillStyle!=null&&this.style.fillStyle!=""){context.fill()}if(style.strokeStyle!=null&&this.style.strokeStyle!=""){context.stroke()}}},clone:function(){ret=new CubicCurve(this.startPoint.clone(),this.controlPoint1.clone(),this.controlPoint2.clone(),this.endPoint.clone());ret.style=this.style.clone();return ret},equals:function(a){if(!a instanceof CubicCurve){return false}return this.startPoint.equals(a.startPoint)&&this.controlPoint1.equals(a.controlPoint1)&&this.controlPoint2.equals(a.controlPoint2)&&this.endPoint.equals(a.endPoint)},deprecated_contains:function(x,y){with(this){var q1=new QuadCurve(startPoint,controlPoint1,controlPoint2);var q2=new QuadCurve(controlPoint1,controlPoint2,endPoint);return q1.contains(x,y)||q2.contains(x,y)}},contains:function(a,j){if(!(a*0+j*0==0)){return false}var d=this.startPoint.x;var h=this.startPoint.y;var c=this.endPoint.x;var e=this.endPoint.y;var g=(Util.pointCrossingsForLine(a,j,d,h,c,e)+Util.pointCrossingsForCubic(a,j,d,h,this.controlPoint1.x,this.controlPoint1.y,this.controlPoint2.x,this.controlPoint2.y,c,e,0));return((g&1)==1)},near:function(x,y,radius){var polls=100;with(this){for(i=0;i<=polls;++i){var t=i/polls;var fromEnd=Math.pow((1-t),3);var fromStart=Math.pow(t,3);var b=3*t*Math.pow((1-t),2);var c=3*Math.pow(t,2)*(1-t);var newX=fromEnd*startPoint.x+b*controlPoint1.x+c*controlPoint2.x+fromStart*endPoint.x;var newY=fromEnd*startPoint.y+b*controlPoint1.y+c*controlPoint2.y+fromStart*endPoint.y;var p=new Point(newX,newY);if(p.near(x,y,radius)){return true}}}return false},getPoints:function(){return[this.startPoint,this.controlPoint1,this.controlPoint2,this.endPoint]},getBounds:function(){return Util.getBounds(this.getPoints())},toString:function(){return"quad("+this.startPoint+","+this.controlPoint1+","+this.controlPoint2+","+this.endPoint+")"},toSVG:function(){var a='<path d="M';a+=this.startPoint.x+","+this.endPoint.y;a+=" C"+this.controlPoint1.x+","+this.controlPoint1.y;a+=" "+this.controlPoint2.x+","+this.controlPoint2.y;a+=" "+this.endPoint.x+","+this.endPoint.y;a+='" style="'+this.style.toSVG()+'"  />';return a}};function Arc(s,o,j,k,d,r,t){this.endAngle=d;this.startAngle=k;this.middle=new Point(s,o);this.radius=j;this.curves=[];var u=8;this.startPoint=null;this.endPoint=null;this.startAngleRadians=0;this.endAngleRadians=0;var c=Math.PI/180*k;this.startAngleRadians=c;this.endAngleRadians=Math.PI/180*d;var g=(Math.PI/180*(d-k))/u;for(var e=0;e<u;e++){if(e<1){this.startPoint=new Point(s+j*Math.cos(g*e),o+j*Math.sin(g*e))}var a=new Point(s+j*Math.cos(g*e),o+j*Math.sin(g*e));var m=j/Math.cos(g*0.5);var h=new Point(s+m*Math.cos(g*(e+1)-g*0.5),o+m*Math.sin(g*(e+1)-g*0.5));if(e==(u-1)){this.endPoint=new Point(s+j*Math.cos(g*(e+1)),o+j*Math.sin(g*(e+1)))}var n=new Point(s+j*Math.cos(g*(e+1)),o+j*Math.sin(g*(e+1)));a.transform(Matrix.translationMatrix(-s,-o));h.transform(Matrix.translationMatrix(-s,-o));n.transform(Matrix.translationMatrix(-s,-o));a.transform(Matrix.rotationMatrix(c));h.transform(Matrix.rotationMatrix(c));n.transform(Matrix.rotationMatrix(c));a.transform(Matrix.translationMatrix(s,o));h.transform(Matrix.translationMatrix(s,o));n.transform(Matrix.translationMatrix(s,o));this.curves.push(new QuadCurve(a,h,n))}this.styleFlag=t;this.style=new Style();this.direction=r;this.oType="Arc"}Arc.load=function(c){var a=new Arc();a.endAngle=c.endAngle;a.startAngle=c.startAngle;a.middle=Point.load(c.middle);a.radius=c.radius;a.curves=QuadCurve.loadArray(c.curves);a.startPoint=Point.load(c.startPoint);a.endPoint=Point.load(c.endPoint);a.startAngleRadians=c.startAngleRadians;a.endAngleRadians=c.endAngleRadians;a.styleFlag=c.styleFlag;a.style=Style.load(c.style);return a};Arc.loadArray=function(a){var d=[];for(var c=0;c<a.length;c++){d.push(Arc.load(a[c]))}return d};Arc.prototype={transform:function(matrix){with(this){if(style!=null){style.transform(matrix)}middle.transform(matrix);for(var i=0;i<curves.length;i++){curves[i].transform(matrix)}}},paint:function(context){with(this){if(style!=null){style.setupContext(context)}context.lineWidth=style.lineWidth;context.moveTo(curves[0].startPoint.x,curves[0].startPoint.y);for(var i=0;i<curves.length;i++){context.quadraticCurveTo(curves[i].controlPoint.x,curves[i].controlPoint.y,curves[i].endPoint.x,curves[i].endPoint.y)}if(styleFlag==1){context.closePath()}else{if(styleFlag==2){context.lineTo(this.middle.x,this.middle.y);context.closePath()}}if(style.fillStyle!=null&&this.style.fillStyle!=""){context.fill()}if(style.strokeStyle!=null&&this.style.strokeStyle!=""){context.stroke()}}},clone:function(){with(this){var ret=new Arc(middle.x,middle.y,radius,startAngle,endAngle,direction,styleFlag);for(var i=0;i<this.curves.length;i++){ret.curves[i]=this.curves[i].clone()}ret.style=this.style.clone();return ret}},equals:function(a){if(!a instanceof Arc){return false}for(var c=0;c<this.curves.lenght;c++){if(!this.curves[c].equals(a.curves[c])){return false}}return this.startAngle==a.startAngle&&this.endAngle==a.endAngle&&this.middle.equals(a.middle)&&this.radius==a.radius&&this.numControlPoints==a.numControlPoints&&this.startPoint.equals(a.startPoint)&&this.endPoint.equals(a.endPoint)&&this.startAngleRadians==a.startAngleRadians&&this.endAngleRadians==a.endAngleRadians},near:function(thex,they,theradius){with(this){for(var i=0;i<curves.length;i++){if(curves[i].near(thex,they,radius)){return true}}}return false},contains:function(thex,they){with(this){var p=getPoints();return Util.isPointInside((new Point(thex,they)),p)}},getPoints:function(){var g=[];if(this.styleFlag==2){g.push(this.middle)}for(var e=0;e<this.curves.length;e++){var h=this.curves[e].getPoints();for(var d=0;d<h.length;d++){g.push(h[d])}}return g},getBounds:function(){return Util.getBounds(this.getPoints())},toString:function(){return"arc("+new Point(this.x,this.y)+","+this.radius+","+this.startAngle+","+this.endAngle+","+this.direction+")"},toSVG:function(){var c='<path d="';c+=" M"+this.curves[0].startPoint.x+","+this.curves[0].startPoint.y;for(var a=0;a<this.curves.length;a++){c+=" Q"+this.curves[a].controlPoint.x+","+this.curves[a].controlPoint.y+" "+this.curves[a].endPoint.x+","+this.curves[a].endPoint.y}c+='" ';c+=this.style.toSVG();c+="/>";return c}};function Ellipse(h,e,a){var g=0.2761423749154;var d=e*2*g;var c=a*2*g;this.centerPoint=h;this.topLeftCurve=new CubicCurve(new Point(h.x-e,h.y),new Point(h.x-e,h.y-c),new Point(h.x-d,h.y-a),new Point(h.x,h.y-a));this.topRightCurve=new CubicCurve(new Point(h.x,h.y-a),new Point(h.x+d,h.y-a),new Point(h.x+e,h.y-c),new Point(h.x+e,h.y));this.bottomRightCurve=new CubicCurve(new Point(h.x+e,h.y),new Point(h.x+e,h.y+c),new Point(h.x+d,h.y+a),new Point(h.x,h.y+a));this.bottomLeftCurve=new CubicCurve(new Point(h.x,h.y+a),new Point(h.x-d,h.y+a),new Point(h.x-e,h.y+c),new Point(h.x-e,h.y));this.matrix=null;this.style=new Style();this.oType="Ellipse"}Ellipse.load=function(c){var a=new Ellipse(new Point(0,0),0,0);a.offsetWidth=c.offsetWidth;a.offsetHeight=c.offsetHeight;a.centerPoint=Point.load(c.centerPoint);a.topLeftCurve=CubicCurve.load(c.topLeftCurve);a.topRightCurve=CubicCurve.load(c.topRightCurve);a.bottomRightCurve=CubicCurve.load(c.bottomRightCurve);a.bottomLeftCurve=CubicCurve.load(c.bottomLeftCurve);this.matrix=Matrix.clone(c.matrix);a.style=Style.load(c.style);return a};Ellipse.prototype={transform:function(a){this.topLeftCurve.transform(a);this.topRightCurve.transform(a);this.bottomLeftCurve.transform(a);this.bottomRightCurve.transform(a);this.centerPoint.transform(a);if(this.style){this.style.transform(a)}},paint:function(context){with(context){with(this){if(style!=null){style.setupContext(context)}beginPath();moveTo(topLeftCurve.startPoint.x,topLeftCurve.startPoint.y);bezierCurveTo(topLeftCurve.controlPoint1.x,topLeftCurve.controlPoint1.y,topLeftCurve.controlPoint2.x,topLeftCurve.controlPoint2.y,topLeftCurve.endPoint.x,topLeftCurve.endPoint.y);bezierCurveTo(topRightCurve.controlPoint1.x,topRightCurve.controlPoint1.y,topRightCurve.controlPoint2.x,topRightCurve.controlPoint2.y,topRightCurve.endPoint.x,topRightCurve.endPoint.y);bezierCurveTo(bottomRightCurve.controlPoint1.x,bottomRightCurve.controlPoint1.y,bottomRightCurve.controlPoint2.x,bottomRightCurve.controlPoint2.y,bottomRightCurve.endPoint.x,bottomRightCurve.endPoint.y);bezierCurveTo(bottomLeftCurve.controlPoint1.x,bottomLeftCurve.controlPoint1.y,bottomLeftCurve.controlPoint2.x,bottomLeftCurve.controlPoint2.y,bottomLeftCurve.endPoint.x,bottomLeftCurve.endPoint.y);if(style.fillStyle!=null&&this.style.fillStyle!=""){fill()}if(style.strokeStyle!=null&&this.style.strokeStyle!=""){stroke()}}}},contains:function(x,y){with(this){var points=topLeftCurve.getPoints();curves=[topRightCurve,bottomRightCurve,bottomLeftCurve];for(var i=0;i<curves.length;i++){curPoints=curves[i].getPoints();for(var a=0;a<curPoints.length;a++){points.push(curPoints[a])}}return Util.isPointInside(new Point(x,y),points)}return false},near:function(c,d,a){return this.topLeftCurve.near(c,d,a)||this.topRightCurve.near(c,d,a)||this.bottomLeftCurve.near(c,d,a)||this.bottomRightCurve.near(c,d,a)},equals:function(a){if(!a instanceof Ellipse){return false}return this.offsetWidth==a.offsetWidth&&this.offsetHeight==a.offsetHeight&&this.centerPoint.equals(a.centerPoint)&&this.topLeftCurve.equals(a.topLeftCurve)&&this.topRightCurve.equals(a.topRightCurve)&&this.bottomRightCurve.equals(a.bottomRightCurve)&&this.bottomLeftCurve.equals(a.bottomLeftCurve)},clone:function(){var a=new Ellipse(this.centerPoint.clone(),10,10);a.topLeftCurve=this.topLeftCurve.clone();a.topRightCurve=this.topRightCurve.clone();a.bottomLeftCurve=this.bottomLeftCurve.clone();a.bottomRightCurve=this.bottomRightCurve.clone();a.style=this.style.clone();return a},toString:function(){return"ellipse("+this.centerPoint+","+this.xRadius+","+this.yRadius+")"},toSVG:function(){var a='<path d="M';a+=this.topLeftCurve.startPoint.x+","+this.topLeftCurve.startPoint.y;a+=" C"+this.topLeftCurve.controlPoint1.x+","+this.topLeftCurve.controlPoint1.y;a+=" "+this.topLeftCurve.controlPoint2.x+","+this.topLeftCurve.controlPoint2.y;a+=" "+this.topLeftCurve.endPoint.x+","+this.topLeftCurve.endPoint.y;a+=" C"+this.topRightCurve.controlPoint1.x+","+this.topRightCurve.controlPoint1.y;a+=" "+this.topRightCurve.controlPoint2.x+","+this.topRightCurve.controlPoint2.y;a+=" "+this.topRightCurve.endPoint.x+","+this.topRightCurve.endPoint.y;a+=" C"+this.bottomRightCurve.controlPoint1.x+","+this.bottomRightCurve.controlPoint1.y;a+=" "+this.bottomRightCurve.controlPoint2.x+","+this.bottomRightCurve.controlPoint2.y;a+=" "+this.bottomRightCurve.endPoint.x+","+this.bottomRightCurve.endPoint.y;a+=" C"+this.bottomLeftCurve.controlPoint1.x+","+this.bottomLeftCurve.controlPoint1.y;a+=" "+this.bottomLeftCurve.controlPoint2.x+","+this.bottomLeftCurve.controlPoint2.y;a+=" "+this.bottomLeftCurve.endPoint.x+","+this.bottomLeftCurve.endPoint.y;a+='" '+this.style.toSVG()+"  />";return a},getPoints:function(){var g=[];var h=[this.topLeftCurve,this.topRightCurve,this.bottomRightCurve,this.bottomLeftCurve];for(var e=0;e<h.length;e++){var d=h[e].getPoints();for(var c=0;c<d.length;c++){g.push(d[c])}}return g},getBounds:function(){return Util.getBounds(this.getPoints())}};function DashedArc(n,j,e,g,c,m,o,h){this.arc=new Arc(n,j,e,g,c,m,o);this.style=this.arc.style;this.dashWidth=h;this.lines=[];for(var d=0;d<100;d+=this.dashWidth){var k=new Arc(n,j,e+this.style.lineWidth/2,(c-g)/100*d,(c-g)/100*(d+1),false);k.style.strokeStyle=this.style.strokeStyle;this.lines.push(k)}this.oType="DashedArc"}DashedArc.load=function(c){var a=new DashedArc(100,100,30,0,360,false,0,6);a.style.fillStyle="#ffffff";a.arc=Arc.load(c.arc);a.style=a.arc.style;a.dashWidth=c.dashWidth;a.lines=Arc.loadArray(c.lines);return a};DashedArc.prototype={transform:function(a){this.arc.transform(a);for(var c=0;c<this.lines.length;c++){this.lines[c].transform(a)}},getBounds:function(){return this.arc.getBounds()},getPoints:function(){return this.arc.getPoints()},contains:function(a,c){return this.arc.contains(a,c)},near:function(c,d,a){return this.arc.near(c,d,a)},toString:function(){return this.arc.toString()},toSVG:function(){throw"Arc:toSVG() - not implemented"},equals:function(c){if(!c instanceof DashedArc){return false}if(this.lines.length!=c.lines.length){return false}else{for(var a in this.lines){if(!this.lines[a].equals(c.lines[a])){return false}}}return this.arc.equals(c.arc)&&this.style.equals(c.style)&&this.dashWidth==c.dashWidth},clone:function(){return this.arc.clone()},paint:function(c){this.style.setupContext(c);c.lineCap="round";for(var a=0;a<this.lines.length;a++){c.beginPath();this.lines[a].paint(c);c.stroke()}this.style.strokeStyle=null;this.arc.paint(c)}};function Path(){this.primitives=[];this.style=new Style();this.oType="Path"}Path.load=function(d){var c=new Path();c.style=Style.load(d.style);for(var a=0;a<d.primitives.length;a++){if(d.primitives[a].oType=="Point"){c.primitives.push(Point.load(d.primitives[a]))}else{if(d.primitives[a].oType=="Line"){c.primitives.push(Line.load(d.primitives[a]))}else{if(d.primitives[a].oType=="Polyline"){c.primitives.push(Polyline.load(d.primitives[a]))}else{if(d.primitives[a].oType=="Polygon"){c.primitives.push(Polygon.load(d.primitives[a]))}else{if(d.primitives[a].oType=="QuadCurve"){c.primitives.push(QuadCurve.load(d.primitives[a]))}else{if(d.primitives[a].oType=="CubicCurve"){c.primitives.push(CubicCurve.load(d.primitives[a]))}else{if(d.primitives[a].oType=="Arc"){c.primitives.push(Arc.load(d.primitives[a]))}else{if(d.primitives[a].oType=="Ellipse"){c.primitives.push(Ellipse.load(d.primitives[a]))}else{if(d.primitives[a].oType=="DashedArc"){c.primitives.push(DashedArc.load(d.primitives[a]))}else{if(d.primitives[a].oType=="Path"){c.primitives.push(Path.load(d.primitives[a]))}}}}}}}}}}}return c};Path.prototype={transform:function(a){for(var c=0;c<this.primitives.length;c++){this.primitives[c].transform(a)}},addPrimitive:function(a){this.primitives.push(a)},contains:function(x,y){with(this){var points=[];for(var i=0;i<primitives.length;i++){if(primitives[i].contains(x,y)){return true}var curPoints=primitives[i].getPoints();for(var a=0;a<curPoints.length;a++){points.push(curPoints[a])}}}return Util.isPointInside(new Point(x,y),points)},near:function(x,y,radius){with(this){var points=[];for(var i=0;i<primitives.length;i++){if(primitives[i].near(x,y,radius)){return true}}}return false},getPoints:function(){var c=[];for(var a=0;a<this.primitives.length;a++){c=c.concat(this.primitives[a].getPoints())}return c},getBounds:function(){var c=[];for(var a in this.primitives){var d=this.primitives[a].getBounds();c.push(new Point(d[0],d[1]));c.push(new Point(d[2],d[3]))}return Util.getBounds(c)},clone:function(){var a=new Path();for(var c=0;c<this.primitives.length;c++){a.addPrimitive(this.primitives[c].clone());if(this.primitives[c].parentFigure){a.primitives[c].parentFigure=a}}a.style=this.style;return a},equals:function(c){if(!c instanceof Path){return false}for(var a=0;a<this.primitives.length;a++){if(!this.primitives[a].equals(c.primitives[a])){return false}}return true},paint:function(h){h.save();if(this.style!=null){this.style.setupContext(h)}if(this.style.fillStyle!=null&&this.style.fillStyle!=""){h.beginPath();h.moveTo(this.primitives[0].startPoint.x,this.primitives[0].startPoint.y);for(var g=0;g<this.primitives.length;g++){var e=this.primitives[g];if(e instanceof Line){h.lineTo(e.endPoint.x,e.endPoint.y)}else{if(e instanceof Polyline){for(var d=0;d<e.points.length;d++){h.lineTo(e.points[d].x,e.points[d].y)}}else{if(e instanceof QuadCurve){h.quadraticCurveTo(e.controlPoint.x,e.controlPoint.y,e.endPoint.x,e.endPoint.y)}else{if(e instanceof CubicCurve){h.bezierCurveTo(e.controlPoint1.x,e.controlPoint1.y,e.controlPoint2.x,e.controlPoint2.y,e.endPoint.x,e.endPoint.y)}}}}}h.fill()}if(this.style.strokeStyle!=null&&this.style.strokeStyle!=""){for(var g=0;g<this.primitives.length;g++){var e=this.primitives[g];h.save();h.beginPath();h.moveTo(e.startPoint.x,e.startPoint.y);if(e instanceof Line){h.lineTo(e.endPoint.x,e.endPoint.y)}else{if(e instanceof Polyline){for(var d=0;d<e.points.length;d++){h.lineTo(e.points[d].x,e.points[d].y)}}else{if(e instanceof QuadCurve){h.quadraticCurveTo(e.controlPoint.x,e.controlPoint.y,e.endPoint.x,e.endPoint.y)}else{if(e instanceof CubicCurve){h.bezierCurveTo(e.controlPoint1.x,e.controlPoint1.y,e.controlPoint2.x,e.controlPoint2.y,e.endPoint.x,e.endPoint.y)}else{if(e instanceof Arc){h.arc(e.startPoint.x,e.startPoint.y,e.radius,e.startAngleRadians,e.endAngleRadians,true)}else{}}}}}var c=e.style.clone();if(e.style==null){e.style=this.style}else{e.style.merge(this.style)}e.style.setupContext(h);h.stroke();e.style=c;h.restore()}}h.restore()},toSVG:function(){var c='<path d="';var h=null;for(var g=0;g<this.primitives.length;g++){var e=this.primitives[g];if(e instanceof Point){throw"Path:toSVG()->Point - not implemented"}if(e instanceof Line){if(h==null||h.endPoint.x!=e.startPoint.x||h.endPoint.y!=e.startPoint.y){c+=" M"+e.startPoint.x+","+e.startPoint.y}c+=" L"+e.endPoint.x+","+e.endPoint.y}else{if(e instanceof Polyline){for(var d=0;d<e.points.length;d++){c+=" L"+e.points[d].x+","+e.points[d].y}}else{if(e instanceof QuadCurve){c+=" Q"+e.controlPoint.x+","+e.controlPoint.y+","+e.endPoint.x+","+e.endPoint.y}else{if(e instanceof CubicCurve){c+=" C"+e.controlPoint1.x+","+e.controlPoint1.y+","+e.controlPoint2.x+","+e.controlPoint2.y+","+e.endPoint.x+","+e.endPoint.y}else{if(e instanceof Arc){throw"Path:toSVG()->Arc - not implemented"}else{if(e instanceof Polyline){throw"Path:toSVGPolylineArc - not implemented"}else{throw"Path:toSVG()->unknown primitive rendering not implemented"}}}}}}h=e}c+='" ';c+=this.style.toSVG();c+=" />";return c}};function Figure(a){this.id=stack.generateId();this.name=a;this.primitives=[];this.groupId=-1;this.properties=[];this.style=new Style();this.rotationCoords=[];this.oType="Figure"}Figure.load=function(d){var a=new Figure();a.id=d.id;a.name=d.name;for(var c=0;c<d.primitives.length;c++){if(d.primitives[c].oType=="Point"){a.primitives.push(Point.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Line"){a.primitives.push(Line.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Polyline"){a.primitives.push(Polyline.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Polygon"){a.primitives.push(Polygon.load(d.primitives[c]))}else{if(d.primitives[c].oType=="QuadCurve"){a.primitives.push(QuadCurve.load(d.primitives[c]))}else{if(d.primitives[c].oType=="CubicCurve"){a.primitives.push(CubicCurve.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Arc"){a.primitives.push(Arc.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Ellipse"){a.primitives.push(Ellipse.load(d.primitives[c]))}else{if(d.primitives[c].oType=="DashedArc"){a.primitives.push(DashedArc.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Text"){a.primitives.push(Text.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Path"){a.primitives.push(Path.load(d.primitives[c]))}else{if(d.primitives[c].oType=="Figure"){a.primitives.push(Figure.load(d.primitives[c]))}else{if(d.primitives[c].oType=="RasterImage"){a.primitives.push(RasterImage.load(d.primitives[c]))}}}}}}}}}}}}}}a.groupId=d.groupId;a.properties=BuilderProperty.loadArray(d.properties);a.style=Style.load(d.style);a.rotationCoords=Point.loadArray(d.rotationCoords);return a};Figure.loadArray=function(c){var a=[];for(var d=0;d<c.length;d++){a.push(Figure.load(c[d]))}return a};Figure.prototype={getText:function(){for(var a=0;a<this.primitives.length;a++){if(this.primitives[a] instanceof Text){return this.primitives[a]}}return""},setText:function(c){for(var a=0;a<this.primitives.length;a++){if(this.primitives[a] instanceof Text){this.primitives[a]=c}}},transform:function(c,a){if(a=="undefined"||a==undefined){a=true}for(var d=0;d<this.primitives.length;d++){this.primitives[d].transform(c)}this.style.transform(c);if(a){CONNECTOR_MANAGER.connectionPointTransform(this.id,c)}if(this.rotationCoords.length!=0){this.rotationCoords[0].transform(c);this.rotationCoords[1].transform(c)}},getPoints:function(){var c=[];for(var a=0;a<this.primitives.length;a++){c=c.concat(this.primitives[a].getPoints())}return c},addPrimitive:function(a){this.primitives.push(a)},finalise:function(){var a=this.getBounds();this.rotationCoords[0]=new Point(a[0]+(a[2]-a[0])/2,a[1]+(a[3]-a[1])/2);this.rotationCoords[1]=new Point(this.rotationCoords[0].x,a[1])},clone:function(){var a=new Figure();for(var c=0;c<this.primitives.length;c++){a.addPrimitive(this.primitives[c].clone())}a.style=this.style;a.rotationCoords[0]=this.rotationCoords[0].clone();a.rotationCoords[1]=this.rotationCoords[1].clone();return a},contains:function(a,e){var d=[];for(var c=0;c<this.primitives.length;c++){if(this.primitives[c].contains(a,e)){return true}d=d.concat(this.primitives[c].getPoints())}return Util.isPointInside(new Point(a,e),d)},getBounds:function(){var c=[];for(var a=0;a<this.primitives.length;a++){var d=this.primitives[a].getBounds();c.push(new Point(d[0],d[1]));c.push(new Point(d[2],d[3]))}return Util.getBounds(c)},paint:function(e){if(this.style){this.style.setupContext(e)}for(var d=0;d<this.primitives.length;d++){var c=this.primitives[d];e.save();var a=null;if(c.style){a=c.style.clone()}if(c.style==null){c.style=this.style}else{c.style.merge(this.style)}e.beginPath();c.paint(e);c.style=a;if(this.style.image!=null){e.clip();e.save();if(this.rotationCoords.length!=0){var h=Util.getAngle(this.rotationCoords[0],this.rotationCoords[1]);if(IE&&h==0){h=1e-8}var g=this.rotationCoords[0].clone();this.transform(Matrix.translationMatrix(-g.x,-g.y));this.transform(Matrix.rotationMatrix(-h));this.transform(Matrix.translationMatrix(g.x,g.y));this.transform(Matrix.translationMatrix(-g.x,-g.y));this.transform(Matrix.rotationMatrix(h));this.transform(Matrix.translationMatrix(g.x,g.y));e.translate(g.x,g.y);e.rotate(h);e.translate(-g.x,-g.y)}e.drawImage(this.style.image,this.rotationCoords[0].x-this.style.image.width/2,this.rotationCoords[0].y-this.style.image.height/2,this.style.image.width,this.style.image.height);e.restore()}else{if(this.style.image!=null){e.fill()}}e.restore()}},equals:function(c){if(!c instanceof Figure){Log.info("Figure:equals() 0");return false}if(this.primitives.length==c.primitives.length){for(var a=0;a<this.primitives.length;a++){if(!this.primitives[a].equals(c.primitives[a])){Log.info("Figure:equals() 1");return false}}}else{Log.info("Figure:equals() 2");return false}if(this.groupId!=c.groupId){return false}if(this.rotationCoords.length==c.rotationCoords.length){for(var a in this.rotationCoords){if(!this.rotationCoords[a].equals(c.rotationCoords[a])){return false}}}else{return false}if(!this.style.equals(c.style)){return false}return true},near:function(c,e,a){for(var d=0;d<this.primitives.length;d++){if(this.primitives[d].near(c,e,a)){return true}}return false},toString:function(){var a=this.name+" [id: "+this.id+"] (";for(var c=0;c<this.primitives.length;c++){a+=this.primitives[c].toString()}a+=")";return a},toSVG:function(){var e="";for(var d=0;d<this.primitives.length;d++){var c=this.primitives[d];var a=null;if(c.style){a=c.style.clone()}if(c.style==null){c.style=this.style}else{c.style.merge(this.style)}e+=this.primitives[d].toSVG();c.style=a}return e}};R90=[[Math.cos(0.0872664626),-Math.sin(0.0872664626),0],[Math.sin(0.0872664626),Math.cos(0.0872664626),0],[0,0,1]];R90A=[[Math.cos(0.0872664626),Math.sin(0.0872664626),0],[-Math.sin(0.0872664626),Math.cos(0.0872664626),0],[0,0,1]];IDENTITY=[[1,0,1],[0,1,0],[0,0,1]];if(typeof(document)=="undefined"){print("\n--==Point==--\n");p=new Point(10,10);print(p);print("\n");p.transform(R90);print(p);print("\n--==Line==--\n");l=new Line(new Point(10,23),new Point(34,50));print(l);print("\n");print("\n--==Polyline==--\n");polyline=new Polyline();for(var i=0;i<5;i++){polyline.addPoint(new Point(i,i*i))}print(polyline);print("\n");print("\n--==Quad curve==--\n");q=new QuadCurve(new Point(75,25),new Point(25,25),new Point(25,62));print(q);print("\n");q.transform(R90);print(q);print("\n--==Cubic curve==--\n");q=new CubicCurve(new Point(75,40),new Point(75,37),new Point(70,25),new Point(50,25));print(q);print("\n");q.transform(R90);print(q);print("\n--==Figure==--\n");f=new Figure();f.addPrimitive(p);f.addPrimitive(q);print(f);f.transform(R90);print("\n");print(f);print("\n")};